// Mocks generated by Mockito 5.4.6 from annotations
// in restaurant_app/test/unit/features/menu/bloc/meal_categories_cubit/meal_categories_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:domain/domain.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurant_app/core/exceptions/custom_exception.dart' as _i3;
import 'package:restaurant_app/core/exceptions/exception_mapper/exception_mapper.dart'
    as _i6;
import 'package:restaurant_app/core/utils/state_controller/state_controller.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMealCategoriesListEntity_0 extends _i1.SmartFake
    implements _i2.MealCategoriesListEntity {
  _FakeMealCategoriesListEntity_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCustomException_1 extends _i1.SmartFake
    implements _i3.CustomException {
  _FakeCustomException_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetAllMealCategoriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllMealCategoriesUseCase extends _i1.Mock
    implements _i2.GetAllMealCategoriesUseCase {
  MockGetAllMealCategoriesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.MealCategoriesListEntity> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<_i2.MealCategoriesListEntity>.value(
              _FakeMealCategoriesListEntity_0(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i4.Future<_i2.MealCategoriesListEntity>);
}

/// A class which mocks [StateController].
///
/// See the documentation for Mockito's code generation for more information.
class MockStateController extends _i1.Mock implements _i5.StateController {
  MockStateController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> handleProccess<T>(
    _i4.Future<T> Function()? process, {
    _i4.FutureOr<void> Function()? onLoading,
    _i4.FutureOr<void> Function(T?)? onSuccess,
    _i4.FutureOr<void> Function(_i3.CustomException)? onError,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #handleProccess,
              [process],
              {#onLoading: onLoading, #onSuccess: onSuccess, #onError: onError},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [ExceptionMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockExceptionMapper extends _i1.Mock implements _i6.ExceptionMapper {
  MockExceptionMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.CustomException map(Object? error) =>
      (super.noSuchMethod(
            Invocation.method(#map, [error]),
            returnValue: _FakeCustomException_1(
              this,
              Invocation.method(#map, [error]),
            ),
          )
          as _i3.CustomException);
}
